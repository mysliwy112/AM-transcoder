#include<iostream>

#include "am_utils.h"
#include "PNGformat.h"
#include "CLZW.h"
#include "CRLE.h"

#include "Image.h"

using namespace std;


namespace am{
    Image::Image()
    {
        //ctor
    }

    void Image::load_ann(bytes::iterator &offset)
    {
        width=get_int(offset,0x2);
        height=get_int(offset,0x2);
        position_x=get_int(offset,0x2);
        position_y=get_int(offset,0x2);
        compression=get_int(offset,0x2);
        image_size=get_int(offset,0x4);

        advance(offset,0x4);
        advance(offset,0xA);

        alpha_size=get_int(offset,0x4);

        name=get_str(offset,0x14);
    }



    void Image::load_img(bytes::iterator &offset)
    {
        if(get_str(offset,0x4)=="PIK"){
            cout<<"This is img."<<endl;
        }
        width=get_int(offset,0x4);
        height=get_int(offset,0x4);
        bpp=get_int(offset,0x4);
        image_size=get_int(offset,0x4);

        advance(offset,0x4);

        int comp=get_int(offset,0x4);
        if(comp==4)
            comp=0;
        compression=comp;
        alpha_size=get_int(offset,0x4);
        position_x=get_int(offset,0x4);
        position_y=get_int(offset,0x4);
    }

    void Image::load_data(bytes data)
    {
        image_data img;
        if(data.size()==image_size+alpha_size){
            img.image.assign(data.begin(),data.begin()+image_size);
            img.alpha.assign(data.begin()+image_size,data.end());
        }
        img.image=decompress(img.image,compression,2);
        img.alpha=decompress(img.alpha,compression,1);
        compression=0;
        create_rgba32(img);
    }

    void Image::load_rgba32(bytes data){
        rgba32=data;
    }

    bytes Image::get_ann_header(int compression){
        bytes data(0x34);
        bytes::iterator offset=data.begin();

        set_int(offset,width,0x4);
        set_int(offset,height,0x4);

        set_data(offset,position_x,0x4);
        set_data(offset,position_y,0x4);

        set_data(offset,compression,0x4);

        set_int(offset,rgba32.size()/2,0x4);

        set_data(offset,bytes(1,4),0x4);
        set_data(offset,bytes(1,0),0xE);

        set_data(offset,rgba32.size()/4,0x4);
        set_string(offset,name,0x14);

        return bytes;

    }

    bytes Image::get_img_header(int compression){
        bytes data(0x28);
        bytes::iterator offset=data.begin();

        set_string(offset,"PIK\0");

        set_int(offset,width,0x4);
        set_int(offset,height,0x4);

        set_int(offset,bpp,0x4);
        set_int(offset,rgba32.size()/2,0x4);
        set_data(offset,bytes(4,0),0x4);
        set_data(offset,compression,0x4);
        set_data(offset,rgba32.size()/4,0x4);

        set_data(offset,position_x,0x4);
        set_data(offset,position_y,0x4);

        return bytes;
    }

    bytes Image::get_am_data(){
        image_data img;
        img=split_rgba32(rgba32);
        img.image=compress(img.image,comp.crzw,2);
        img.alpha=compress(img.alpha,comp.crzw,1);
        img.image.insert(img.image.end(),img.alpha.begin(),img.alpha.end());
        return img.image;
    }

    bytes Image::get_rgba32(){
        return rgba32;
    }

    void Image::read_png(string filename){
        load_png();
    }

    void Image::write_png(string filename){
        write_PNG(rgba32.data(),width,height,8,filename.c_str());
    }

    void Image::read_img(string filename){
        bytes data=read_file(filename);
        bytes::iterator i=data.begin();
        load_img_header(get_data(i,0x28));
        load_data(get_data(i,image_size+alpha_size));
    }

    void Image::write_img(string filename){
        bytes data=get_img_header();
        bytes img=get_am_data();
        data.insert(data.end(),img.begin(),img.end());
        save_file(filename,data);
    }

    bytes Image::decompress(bytes data, int type, int size){
        try{
            if(type==0){
            }else if(type==4){
                    data=decodeCRLE(data,size);

            }else if(type==3){
                    data=decodeCLZW(data);
                    data=decodeCRLE(data,size);

            }else if(type==2){
                    data=decodeCLZW(data);

            }else{
                throw invalid_argument(string("Unknown compression: ")+to_string(type));
            }
        }catch(...){
            cout<<"Can't decompress image, compression type:"<<type<<endl;
            throw"File decompress problem";
        }



        if(log){
            if(image.size()==alpha.size()*3)
                cout<<"Size of image: "<<image.size()<<endl;
            else
                cout<<"Size of image and it's alpha doesn't match: image->"<<image.size()<<" <> "<<alpha.size()*3<<"<-alpha*2"<<endl;
        }

        return data;
    }

    bytes Image::compress(bytes data, int type, int size){
        try{
            if(type==0){
            }else if(type==4){
                data=codeCRLE(data,size);

            }else if(type==3){
                data=codeCRLE(data,size);
                data=codeCLZW(data);

            }else if(type==2){
                data=codeCLZW(data);

            }else{
                throw invalid_argument(string("Unknown compression: ")+to_string(type));
            }
        }catch(...){
            cout<<"Can't compress image, compression type:"<<type<<endl;
            throw"File decompress problem";
        }



        if(log){
            if(image.size()==alpha.size()*3)
                cout<<"Size of image: "<<image.size()<<endl;
            else
                cout<<"Size of image and it's alpha doesn't match: image->"<<image.size()<<" <> "<<alpha.size()*3<<"<-alpha*2"<<endl;
        }

        return data;
    }

    void Image::align(){
        bytes add=position_y*width;
        rgba32.insert(rgba32.begin(),(img.+min_y)*max_x*4,0);
        pos+=(img.position_y+min_y)*max_x*4;
        while(pos<img.decode_data.size()){
            img.decode_data.insert(img.decode_data.begin()+pos,(img.position_x+min_x)*bpp,0);
            pos+=(img.position_x+min_x)*bpp+img.width*bpp;
            img.decode_data.insert(img.decode_data.begin()+pos,end_add*bpp,0);
            pos+=end_add*bpp;
        }
        img.decode_data.insert(img.decode_data.end(),(max_y-img.position_y-img.height)*max_x*bpp,0);
        img.width=max_x;
        img.height=max_y;
    }


    void Image::create_rgba32(image_data img){

        bytes n(img.image.size()/2*3);
        int temp;
        int counter=0;
        for(unsigned int i=0;i<img.image.size();i+=2){
                temp=img.image[i]+img.image[i+1]*256;
                n[counter+2]=(temp%32)*256/32;
                temp=(temp-temp%32)/32;
                n[counter+1]=(temp%64)*256/64;
                temp=(temp-temp%64)/64;
                n[counter]=(temp%32)*256/32;
                counter+=3;
        }
        img.image=n;

        rgba32.resize(img.image.size()+img.alpha.size(),0);
        int al=0;
        int da=0;
        for(unsigned int i=0;i<rgba32.size();i+=4){
            rgba32[i]=img.image[da];
            rgba32[i+1]=img.image[da+1];
            rgba32[i+2]=img.image[da+2];
            rgba32[i+3]=img.alpha[al];
            da+=3;
            al++;
        }
    }
};
